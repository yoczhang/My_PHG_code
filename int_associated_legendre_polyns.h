/*
 * The int_associated_legendre_ployns.h is aimed to computed integration 
 * of associated legendre ploynoimals using the Gauss-Legender quad rules.
 *
 */

# include "phg.h"
# include <stdlib.h>
# include <stdio.h>
# include <math.h>
# include <time.h>
# include <string.h>


/*--------------------------------------------------------------------------------*/
/**********************************************************************************/
void
get_Gauss_points_weights(INT left, INT right, INT Gauss_order, FLOAT *Gauss_points, 
        FLOAT *Gauss_weights);
/**********************************************************************************/
/*--------------------------------------------------------------------------------*/



/*--------------------------------------------------------------------------------*/
/**********************************************************************************/
FLOAT
int_associated_legendre_polyns(int l, int m, int l1, int m1, int mm, FLOAT *x, 
        FLOAT *wts);
/**********************************************************************************/
/*--------------------------------------------------------------------------------*/



/*--------------------------------------------------------------------------------*/
/**********************************************************************************/
/*
 * Generating the associated_legendre_ployns values in the points x[], the details 
 * in the following interpretations.
 */
FLOAT *
pm_polynomial_value(int mm, int n, int m, FLOAT *x);
/**********************************************************************************/
/*--------------------------------------------------------------------------------*/



/*--------------------------------------------------------------------------------*/
/**********************************************************************************/
void 
cdgqf ( int nt, int kind, double alpha, double beta, double t[], double wts[] );

void 
cgqf ( int nt, int kind, double alpha, double beta, double a, double b, double t[], 
        double wts[] );

double 
class_matrix ( int kind, int m, double alpha, double beta, double aj[], double bj[] );

void 
imtqlx ( int n, double d[], double e[], double z[] );

void 
parchk ( int kind, int m, double alpha, double beta );

double 
r8_epsilon ( );

double 
r8_gamma ( double x );

double 
r8_sign ( double x );

void 
r8mat_write ( char *output_filename, int m, int n, double table[] );

void 
rule_write ( int order, char *filename, double x[], double w[], double r[] );

void 
scqf ( int nt, double t[], int mlt[], double wts[], int nwts, int ndx[], double swts[], 
        double st[], int kind, double alpha, double beta, double a, double b );

void 
sgqf ( int nt, double aj[], double bj[], double zemu, double t[], double wts[] );

void timestamp ( );
/**********************************************************************************/
/*--------------------------------------------------------------------------------*/



/*--------------------------------------------------------------------------------*/
/**********************************************************************************/

/**********************************************************************************/
/*--------------------------------------------------------------------------------*/



/*--------------------------------------------------------------------------------*/
/**********************************************************************************/

/**********************************************************************************/
/*--------------------------------------------------------------------------------*/



/*--------------------------------------------------------------------------------*/
/**********************************************************************************/

/**********************************************************************************/
/*--------------------------------------------------------------------------------*/



/*--------------------------------------------------------------------------------*/
/**********************************************************************************/

/**********************************************************************************/
/*--------------------------------------------------------------------------------*/



/*--------------------------------------------------------------------------------*/
/**********************************************************************************/

/**********************************************************************************/
/*--------------------------------------------------------------------------------*/



/*--------------------------------------------------------------------------------*/
/**********************************************************************************/

/**********************************************************************************/
/*--------------------------------------------------------------------------------*/



/*--------------------------------------------------------------------------------*/
/**********************************************************************************/

/**********************************************************************************/
/*--------------------------------------------------------------------------------*/



/*--------------------------------------------------------------------------------*/
/**********************************************************************************/

/**********************************************************************************/
/*--------------------------------------------------------------------------------*/



/*--------------------------------------------------------------------------------*/
/**********************************************************************************/

/**********************************************************************************/
/*--------------------------------------------------------------------------------*/
